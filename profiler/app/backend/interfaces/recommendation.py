"""
Interface definitions for recommendation service.

This module defines the interfaces for the recommendation service.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from datetime import datetime, timezone


class Recommendation:
    """Represents a recommendation generated by the service."""
    
    def __init__(
        self,
        category: str,
        title: str,
        description: str,
        priority: int,
        confidence: float,
        action_items: Optional[List[str]] = None,
        metadata: Optional[Dict[str, Any]] = None
    ):
        """
        Initialize a Recommendation object.
        
        Args:
            category: Category of the recommendation (e.g., academic, personal)
            title: Short title of the recommendation
            description: Detailed description of the recommendation
            priority: Priority level (1=highest priority)
            confidence: Confidence score for the recommendation (0-1)
            action_items: List of specific actions the user can take
            metadata: Additional metadata about the recommendation
        """
        self.category = category
        self.title = title
        self.description = description
        self.priority = priority
        self.confidence = confidence
        self.action_items = action_items or []
        self.metadata = metadata or {}
    
    def dict(self) -> Dict[str, Any]:
        """
        Convert the Recommendation object to a dictionary.
        
        Returns:
            A dictionary representation of the Recommendation
        """
        result = {
            "category": self.category,
            "title": self.title,
            "description": self.description,
            "priority": self.priority,
            "action_items": self.action_items,
            "confidence": self.confidence
        }
        
        if self.metadata:
            result["metadata"] = self.metadata
            
        return result


class ProfileSummary:
    """Represents a summary of a user's profile."""
    
    def __init__(
        self,
        strengths: List[str],
        areas_for_improvement: List[str],
        unique_selling_points: List[str],
        overall_quality: float,
        last_updated: Optional[str] = None
    ):
        """
        Initialize a ProfileSummary object.
        
        Args:
            strengths: List of the profile's strengths
            areas_for_improvement: List of areas that need improvement
            unique_selling_points: List of unique selling points
            overall_quality: Overall quality score (0-1)
            last_updated: Timestamp of when the summary was generated
        """
        self.strengths = strengths
        self.areas_for_improvement = areas_for_improvement
        self.unique_selling_points = unique_selling_points
        self.overall_quality = overall_quality
        
        # Set last_updated to current time if not provided
        if last_updated is None:
            self.last_updated = datetime.now(timezone.utc).isoformat()
        else:
            self.last_updated = last_updated
    
    def dict(self) -> Dict[str, Any]:
        """
        Convert the ProfileSummary object to a dictionary.
        
        Returns:
            A dictionary representation of the ProfileSummary
        """
        return {
            "strengths": self.strengths,
            "areas_for_improvement": self.areas_for_improvement,
            "unique_selling_points": self.unique_selling_points,
            "overall_quality": self.overall_quality,
            "last_updated": self.last_updated
        }


class IRecommendationService(ABC):
    """Interface for recommendation services."""
    
    @abstractmethod
    def configure(self, config: Dict[str, Any]) -> None:
        """
        Configure the service with the provided settings.
        
        Args:
            config: Configuration parameters for the service
        """
        pass
    
    @abstractmethod
    def generate_recommendations(
        self,
        user_id: str,
        profile_data: Dict[str, Any],
        categories: Optional[List[str]] = None,
        max_recommendations: int = 5
    ) -> List[Recommendation]:
        """
        Generate recommendations based on profile data.
        
        Args:
            user_id: ID of the user
            profile_data: Profile data to base recommendations on
            categories: Optional list of categories to filter by
            max_recommendations: Maximum number of recommendations to generate
            
        Returns:
            A list of Recommendation objects
        """
        pass
    
    @abstractmethod
    def get_profile_summary(
        self,
        user_id: str,
        profile_data: Dict[str, Any]
    ) -> ProfileSummary:
        """
        Generate a summary of a user's profile.
        
        Args:
            user_id: ID of the user
            profile_data: Profile data to summarize
            
        Returns:
            A ProfileSummary object
        """
        pass 